name: 'GCP Infrastructure with Terraform Provisioning'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    outputs:
      external_ip: ${{ steps.store.outputs.vm_external_ip }}
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Google Auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Use gcloud CLI
      run: gcloud info

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Create Terraform Variables
      id: vars
      run: |
        cat > terraform.tfvars <<EOF
        project_id="${{ secrets.GCP_PROJECT_ID }}"
        ssh_pub_key="${{ secrets.SSH_PUBLIC_KEY }}"
        ssh_username="${{ secrets.GCP_USERNAME }}"
        domain_name="${{ secrets.DOMAIN_NAME }}"
        dns_record_name="${{ secrets.DNS_RECORD_NAME }}"
        managed_zone_name="${{ secrets.MANAGED_ZONE_NAME }}"
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt

    - name: Terraform Plan
      run: terraform plan -out=plan

    - name: Terraform Apply
      run: terraform apply "plan"

    - name: Store Terraform Output
      run: |
        EXTERNAL_IP=$(terraform-bin output -raw vm_external_ip)
        echo "VM_EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
        echo "not env: $EXTERNAL_IP"
        echo "env: ${{ env.VM_EXTERNAL_IP }}"
    
    - name: Echo Terraform Output 
      id: store
      env:
        EXTERNAL_IP: ${{ env.VM_EXTERNAL_IP }}
      run: |
        echo "env directly: ${{ env.VM_EXTERNAL_IP }}"
        echo "env variable: $EXTERNAL_IP"
        echo "vm_external_ip=$EXTERNAL_IP" >> "$GITHUB_OUTPUT"

    - name: Terraform State
      run: terraform show

    - name: Terraform Destroy
      if: ${{ always() }}
      run: terraform destroy -auto-approve
